name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Mondays at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    name: Dependency Vulnerability Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Language-specific security scans
  nodejs-security:
    runs-on: ubuntu-latest
    name: Node.js Security Scan
    if: hashFiles('package.json') != ''
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate
          npm audit fix --dry-run

      - name: Run Snyk security scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json

      - name: Upload Snyk results to GitHub Code Scanning
        if: env.SNYK_TOKEN != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  python-security:
    runs-on: ubuntu-latest
    name: Python Security Scan
    if: hashFiles('requirements.txt', 'pyproject.toml', 'Pipfile') != ''
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            pip install .
          fi

      - name: Install security tools
        run: |
          pip install safety bandit semgrep

      - name: Run Safety check
        run: |
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json --output safety-report.json || true
          fi

      - name: Run Bandit security linter
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: python-security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json

  java-security:
    runs-on: ubuntu-latest
    name: Java Security Scan
    if: hashFiles('pom.xml', 'build.gradle', 'build.gradle.kts') != ''
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        if: hashFiles('pom.xml') != ''
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Cache Gradle dependencies
        if: hashFiles('build.gradle', 'build.gradle.kts') != ''
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Run OWASP Dependency Check (Maven)
        if: hashFiles('pom.xml') != ''
        run: |
          mvn org.owasp:dependency-check-maven:check

      - name: Run OWASP Dependency Check (Gradle)
        if: hashFiles('build.gradle', 'build.gradle.kts') != ''
        run: |
          ./gradlew dependencyCheckAnalyze

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v3
        with:
          name: owasp-dependency-check-report
          path: |
            target/dependency-check-report.html
            build/reports/dependency-check-report.html

  # SAST (Static Application Security Testing)
  codeql-analysis:
    runs-on: ubuntu-latest
    name: CodeQL Security Analysis
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python', 'java', 'csharp', 'cpp', 'go' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Container security scanning (if Dockerfile exists)
  container-security:
    runs-on: ubuntu-latest
    name: Container Security Scan
    if: hashFiles('Dockerfile') != ''
    
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t security-scan-image .

      - name: Run Trivy vulnerability scanner on container
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan-image'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  # Secret scanning (additional to GitHub's built-in)
  secret-scan:
    runs-on: ubuntu-latest
    name: Secret Scan
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Infrastructure as Code security
  iac-security:
    runs-on: ubuntu-latest
    name: Infrastructure Security Scan
    if: hashFiles('*.tf', '*.yaml', '*.yml', 'docker-compose.yml') != ''
    
    steps:
      - uses: actions/checkout@v4

      - name: Run Checkov action
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,cloudformation,kubernetes,docker_compose
          output_format: sarif
          output_file_path: checkov-report.sarif

      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-report.sarif

  # Generate security report
  security-report:
    runs-on: ubuntu-latest
    name: Generate Security Report
    needs: [dependency-scan, nodejs-security, python-security, java-security, codeql-analysis, container-security, secret-scan, iac-security]
    if: always()
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all security reports
        uses: actions/download-artifact@v3

      - name: Generate consolidated security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results Summary" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Node.js Security: ${{ needs.nodejs-security.result }}" >> security-report.md
          echo "- Python Security: ${{ needs.python-security.result }}" >> security-report.md
          echo "- Java Security: ${{ needs.java-security.result }}" >> security-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Infrastructure Security: ${{ needs.iac-security.result }}" >> security-report.md
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "1. Review all HIGH and CRITICAL vulnerabilities immediately" >> security-report.md
          echo "2. Update dependencies to latest secure versions" >> security-report.md
          echo "3. Address any exposed secrets or credentials" >> security-report.md
          echo "4. Review and fix infrastructure security issues" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-security-report
          path: security-report.md

      - name: Comment PR with security summary (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });
